#ifndef _MySelectionBuildHelper_
#define _MySelectionBuildHelper_
#include "Game.h"
#include "IHardwareMouse.h"
#include "EconomicResources.h"

//В данной структуре описаны поля, необходимые для управления и идентификации конкретных зданий.
//Данные поля в основном используютя в флеш-представлении, для графического отображения.


struct SBuilding
{
	string Name;	//Наименование здания
	string Descr;	//Описание здания
	string Additional;	//Дополнительная инфа по поводу здания
	string Model;	//Путь к модели
	int Type;	//Тип здания
	int Cost;	//Цена здания
	int Wood;	//Необходимое количество дерева
	int Stone;	//Количество камня
	int Iron;	//Количество железа

	std::vector <SResource> ProvidingResources;
	//Возможно для здания понадобиться какой-то уникальный предмет(ресурс) для строительства.
	//Его стоит учесть и добавить некоторое поле, на абстрактном уровне, что-то вроде:
	//int UniqResource;
	//-----------------------------
	 SBuilding()
	 {
		 Type = 0;
		 Cost = 0;
		 Wood = 0;
		 Stone= 0;
		 Iron = 0;
		 //Включить уникальный ресурс в конструктор.
	 }
};


//Класс реализует механизм выбора хэлпера постройки
//и считывания его параметров для дальнейшей передачи считанных данных во флеш
//Наследует: IActionListener - в данном случаи используется для слушанья клика мышки.
class CSelectionBuildHelper
{
public: 
	CSelectionBuildHelper();

	//Описание:
	//Функция производит проекцию координат мышки на 3д-спейс, получает выбранную сущность, если проекция была удачной,
	//Считывает параметры сущности, определяет ту камеру, которая состоит в паре хэлпер-камера, выбирает её,
	//Вызывает флеш меню и заполняет список зданий во флеше по данному хелперу.
	void Select();

	//Описание:
	//Функция считывает параметры из проперти листа сущности, и инициализирует список массив зданий для данного хэлпера.
	void BuildOptions();

	//Описание:
	//Функция производит спаун здания.
	//Принимает: путь к модели здания.
	void SpawnBuilding(string model);

	//Функции ниже возвращают параметры зданий по имени
	//Описание:
	//Данная функция считывает из XML файла параметры, по заданному имени здания.
	//Принимает: уникальное имя здания, которое нужно найти в хмл
	SBuilding* GetBuildParams(const char* name);
	SBuilding* GetBuilding(int index){ return &m_Buildings[index]; }
	
	//Описание:
	//Функция производит проекцию мышки из 2д-спейса в 3д-спейс и возвращает сущность, на которую наведена мышка
	IEntity* GetMouseEntityID();
private:
	IEntity* m_SelectedEntityBuildId;
	std::vector<SBuilding> m_Buildings;//Список зданий конкретного хэпера
};


#endif